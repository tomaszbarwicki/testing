apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.backend.puris.existingSecret }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "backend.labels" . | nindent 4 }}
type: Opaque
# use lookup function to check if secret exists
{{- $secret := (lookup "v1" "Secret" .Release.Namespace .Values.backend.puris.existingSecret) }}
{{ if $secret -}}
data:
  # if secret exists, use value provided from values file (to cover update scenario) or existing value from secret
  # use data map instead of stringData to prevent base64 encoding of already base64-encoded existing value from secret
  # use index function for secret keys with hyphen otherwise '$secret.data.secretKey' works too
  puris-api-key: {{ (.Values.backend.puris.api.key | b64dec) | default (index $secret.data "puris-api-key") | quote }}
  puris-datasource-password: {{ (.Values.backend.puris.datasource.password | b64dec) | default (index $secret.data "puris-datasource-password") | quote }}
  puris-edc-controlplane-key: {{ (.Values.backend.puris.edc.controlplane.key | b64dec) | default (index $secret.data "puris-edc-controlplane-key") | quote }}
{{ else -}}
stringData:
# if secret doesn't exist, use provided value from values file or generate a random one
  puris-api-key: {{ .Values.backend.puris.api.key | default ( randAlphaNum 32 ) | quote }}
  puris-datasource-password: {{ .Values.backend.puris.datasource.password | default ( randAlphaNum 32 ) | quote }}
  puris-edc-controlplane-key: {{ .Values.backend.puris.edc.controlplane.key | default ( randAlphaNum 32 ) | quote }}
{{ end }}
